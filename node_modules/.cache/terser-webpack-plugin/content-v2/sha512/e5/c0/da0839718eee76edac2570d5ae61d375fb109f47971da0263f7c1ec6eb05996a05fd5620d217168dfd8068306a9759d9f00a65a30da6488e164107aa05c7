{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{759:function(s,t,a){\"use strict\";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[s._v(\"提示\")]),s._v(\" \"),a(\"p\",[s._v(\"转自: \"),a(\"a\",{attrs:{href:\"https://github.com/lhzzzzzz/1earn/blob/master/1earn/Develop/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"1earn\"),a(\"OutboundLink\")],1)])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/git/1.png#pic_center\",alt:\"Git\"}})]),s._v(\" \"),a(\"p\"),a(\"div\",{staticClass:\"table-of-contents\"},[a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#原理\"}},[s._v(\"原理\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#基本操作\"}},[s._v(\"基本操作\")]),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#分支管理\"}},[s._v(\"分支管理\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#标签管理\"}},[s._v(\"标签管理\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#忽略文件\"}},[s._v(\"忽略文件\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#别名\"}},[s._v(\"别名\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#撤销git操作\"}},[s._v(\"撤销Git操作\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#跳转\"}},[s._v(\"跳转\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#子模块\"}},[s._v(\"子模块\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#大小写\"}},[s._v(\"大小写\")])])])]),a(\"li\",[a(\"a\",{attrs:{href:\"#远程操作\"}},[s._v(\"远程操作\")]),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#clone\"}},[s._v(\"clone\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#remote\"}},[s._v(\"remote\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#fetch\"}},[s._v(\"fetch\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#pull\"}},[s._v(\"pull\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#push\"}},[s._v(\"push\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#github\"}},[s._v(\"github\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#git-lfs\"}},[s._v(\"Git_LFS\")])])])])])]),a(\"p\"),s._v(\" \"),a(\"hr\"),s._v(\" \"),a(\"h2\",{attrs:{id:\"原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原理\"}},[s._v(\"#\")]),s._v(\" 原理\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/git/2.jpg\",alt:\"Git原理\"}})]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"工作区(Working Directory)\")])]),s._v(\" \"),a(\"p\",[s._v(\"就是你在电脑里能看到的目录，比如我的 gitcode 文件夹就是一个工作区.\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"版本库(Repository)\")])]),s._v(\" \"),a(\"p\",[s._v(\"工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库.\")]),s._v(\" \"),a(\"p\",[s._v(\"Git 的版本库里存了很多东西，其中最重要的就是称为 stage(或者叫 index)的暂存区，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD .\")]),s._v(\" \"),a(\"p\",[s._v(\"把文件往 Git 版本库里添加的时候，是分两步执行的:\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"第一步是用 git add 把文件添加进去，实际上就是把文件修改添加到暂存区;\")]),s._v(\" \"),a(\"li\",[s._v(\"第二步是用 git commit 提交更改，实际上就是把暂存区的所有内容提交到当前分支.\")])]),s._v(\" \"),a(\"p\",[s._v(\"因为我们创建 Git 版本库时，Git 自动为我们创建了唯一一个 master 分支，所以，现在，git commit 就是往 master 分支上提交更改.\")]),s._v(\" \"),a(\"p\",[s._v(\"你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改.\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\".git 目录\")])]),s._v(\" \"),a(\"p\",[s._v(\"结构展开类似\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"├── HEAD\\n├── branches\\n├── config\\n├── description\\n├── hooks\\n│ ├── pre-commit.sample\\n│ ├── pre-push.sample\\n│ └── ...\\n├── info\\n│ └── exclude\\n├── objects\\n│ ├── info\\n│ └── pack\\n└── refs\\n ├── heads\\n └── tags\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),a(\"br\")])]),a(\"ul\",[a(\"li\",[a(\"p\",[s._v(\"conf\")]),s._v(\" \"),a(\"p\",[s._v(\"conf 文件中包含着 repository 的配置，包括 remote 的地址，提交时的 email, username, 等等，所有通过 git config .. 来设置的内容都在这里保存着。如果熟悉甚至可以直接修改该文件。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"description\")]),s._v(\" \"),a(\"p\",[s._v(\"被 gitweb(github 之前）用来描述 repository 内容。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"hooks\")]),s._v(\" \"),a(\"p\",[s._v(\"hooks，国内通常被翻译成钩子，git 中一个比较有趣的功能。可以编写一些脚本让 git 在各个阶段自动执行。这些脚本被称为 hooks, 脚本可以在 commit/rebase/pull 等等环节前后被执行。脚本的名字暗示了脚本被执行的时刻。一个比较常见的使用场景就是在 pre-push 阶段检查本地提交是否遵循了 remote 仓库的代码风格。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"info exclude\")]),s._v(\" \"),a(\"p\",[s._v(\"该文件中定义的文件不会被 git 追踪，和 .gitignore 作用相同。大部分情况下 .gitignore 就足够了，但知道 info/exclude 文件的存在也是可以的。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"object\")]),s._v(\" \"),a(\"p\",[s._v(\"每一次创建一些文件，提交，git 都会压缩并将其保存到自己的数据结构中。压缩的内容会拥有一个唯一的名字，一个 hash 值，该 hash 值会保存到 object 目录中。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"HEAD\")]),s._v(\" \"),a(\"p\",[s._v(\"HEAD 可以比喻成一个指针，指向当前工作的分支。\")])])]),s._v(\" \"),a(\"hr\"),s._v(\" \"),a(\"h2\",{attrs:{id:\"基本操作\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本操作\"}},[s._v(\"#\")]),s._v(\" 基本操作\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global user.name \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"username\"')]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global user.email user@aaa.com\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 如果使用了 -global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情，Git 都会使用那些信息.当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 -global 选项的命令来配置.\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global http.proxy                              \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看当前代理设置\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global http.proxy \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'socks5://127.0.0.1:1080'\")]),s._v(\"    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 设置当前代理\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global https.proxy \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'socks5://127.0.0.1:1080'\")]),s._v(\"   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 设置当前代理\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global --unset https.proxy                     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 删除 proxy\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" init                    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 初始化仓库\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --list           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 检查配置信息\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" status                  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看状态\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"diff\")]),s._v(\"                    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看已暂存和未暂存的修改\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"diff\")]),s._v(\" --cached           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看暂存区和本地仓库之间的差异\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" log                     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看提交历史\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reflog                  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 显示当前分支的最近几次提交\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" commit -m \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Input your commit message\"')]),s._v(\"       \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 提交更新\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" commit -a -m \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Commit message\"')]),s._v(\"               \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 跳过使用暂存区\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" commit --allow-empty-message --no-edit      \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 懒得什么 message 都不想写\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" commit -m \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'test1\\ntest2\\ntest3\\n'\")]),s._v(\"                           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 提交多行 massage\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"rm\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"finame\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"mv\")]),s._v(\" file_from file_to\\n\\n已修改，未暂存\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 如果我们只是在编辑器里修改了文件，但还没有执行 git add .，这时候我们的文件还在工作区，并没有进入暂存区，我们可以用\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" checkout -- test.txt  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v('# git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以 \"一键还原\".')]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reset HEAD \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"file\")]),s._v(\"         \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 把暂存区的修改撤销掉(unstage)，重新放回工作区\")]),s._v(\"\\n\\n已暂存，未提交\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v('# 你已经执行了 git add .，但还没有执行 git commit -m \"comment\".这时候你意识到了错误，想要撤销，你可以执行:')]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reset\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" checkout \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\".\")]),s._v(\"\\n\\n已提交，未推送\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 你的手太快，你既执行了 git add .，又执行了 git commit，这时候你的代码已经进入了你的本地仓库，然而你后悔了，怎么办？不要着急，还有办法.\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reset --hard origin/master\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 还是这个 git reset --hard 命令，只不过这次多了一个参数 origin/master，正如我们上面讲过的，origin/master 代表远程仓库，既然你已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧.\")]),s._v(\"\\n\\n已推送\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 很不幸，你的手实在是太快了，你既 git add 了，又 git commit 了，并且还 git push 了，这时你的代码已经进入远程仓库.如果你想恢复的话，还好，由于你的本地仓库和远程仓库是等价的，你只需要先恢复本地仓库，再强制 push 到远程仓库就好了:\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reset --hard HEAD^\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push -f\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"37\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"38\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"39\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"40\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"41\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"42\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"43\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"44\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"45\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"46\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"47\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"48\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"49\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"50\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"分支管理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分支管理\"}},[s._v(\"#\")]),s._v(\" 分支管理\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/git/3.png\",alt:\"分支管理\"}})]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch                  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch -r               \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看远程分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch -a               \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看所有分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 创建分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" checkout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"         \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 切换分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" checkout -b \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"      \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 创建 + 切换分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" merge \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"            \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 合并某分支到当前分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch -d \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 删除分支\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" stash                   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 储藏分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" stash list\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" stash pop               \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 恢复的同时把 stash 内容也删了\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"标签管理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#标签管理\"}},[s._v(\"#\")]),s._v(\" 标签管理\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 注意，标签不是按时间顺序列出，而是按字母排序的.可以用 git show <tagname> 查看标签信息\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" tag \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" 用于新建一个标签，默认为 HEAD，也可以指定一个 commit \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"id\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" tag -a \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"tagname\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" -m \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"blablabla...\"')]),s._v(\" 可以指定标签信息\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" tag -s \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"tagname\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" -m \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"blablabla...\"')]),s._v(\" 可以用 PGP 签名标签\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" tag 可以查看所有标签.\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push origin \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"tagname\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" 可以推送一个本地标签\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push origin --tags 可以推送全部未推送过的本地标签\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" tag -d \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"tagname\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" 可以删除一个本地标签\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push origin :refs/tags/\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"tagname\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" 可以删除一个远程标签.\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"忽略文件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#忽略文件\"}},[s._v(\"#\")]),s._v(\" 忽略文件\")]),s._v(\" \"),a(\"p\",[s._v(\"一个名为 \"),a(\"code\",[s._v(\".gitignore\")]),s._v(\" 的文件，列出要忽略的文件模式.\\n配置语法:\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v('以斜杠 \"/\" 开头表示目录;\\n以星号 \"*\" 通配多个字符;\\n以问号 \"?\" 通配单个字符\\n以方括号 \"[]\" 包含单个字符的匹配列表;\\n以叹号 \"!\" 表示不忽略(跟踪)匹配到的文件或目录;\\n\\n/*\\n!.gitignore\\n!/fw/bin/\\n!/fw/sf/\\n说明:忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录;\\n')])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\")])]),a(\"p\",[s._v(\"此外，git 对于 \"),a(\"code\",[s._v(\".ignore\")]),s._v(\" 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效;\")]),s._v(\" \"),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"别名\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#别名\"}},[s._v(\"#\")]),s._v(\" 别名\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[s._v(\"以下2条都是对 \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" lg 的 \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\"alias\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global alias.lg \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"\\\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --\\\"\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global alias.lg \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"\\\"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\\"\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"撤销git操作\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#撤销git操作\"}},[s._v(\"#\")]),s._v(\" 撤销Git操作\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"撤销提交\")])]),s._v(\" \"),a(\"p\",[s._v(\"一种常见的场景是，提交代码以后，你突然意识到这个提交有问题，应该撤销掉，这时执行下面的命令就可以了。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" revert HEAD\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[s._v(\"上面命令的原理是，在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。\")]),s._v(\" \"),a(\"p\",[a(\"code\",[s._v(\"git revert\")]),s._v(\" 命令只能抵消上一个提交，如果想抵消多个提交，必须在命令行依次指定这些提交。比如，抵消前两个提交，要像下面这样写。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" revert \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"倒数第一个提交\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"倒数第二个提交\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[s._v(\"git revert 命令还有两个参数。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[s._v(\"--no-edit   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。\")]),s._v(\"\\n--no-commit \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 只抵消暂存区和工作区的文件变化，不产生新的提交。\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[s._v(\"丢弃提交\")])]),s._v(\" \"),a(\"p\",[s._v(\"如果希望以前的提交在历史中彻底消失，而不是被抵消掉，可以使用 \"),a(\"code\",[s._v(\"git reset\")]),s._v(\" 命令，丢弃掉某个提交之后的所有提交。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reset \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"last good SHA\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[a(\"code\",[s._v(\"git reset\")]),s._v(\" 的原理是，让最新提交的指针回到以前某个时点，该时点之后的提交都从历史中消失。\")]),s._v(\" \"),a(\"p\",[s._v(\"默认情况下，\"),a(\"code\",[s._v(\"git reset\")]),s._v(\" 不改变工作区的文件（但会改变暂存区），\"),a(\"code\",[s._v(\"--hard\")]),s._v(\" 参数可以让工作区里面的文件也回到以前的状态。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reset --hard \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"last good SHA\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[s._v(\"执行 \"),a(\"code\",[s._v(\"git reset\")]),s._v(\" 命令之后，如果想找回那些丢弃掉的提交，可以使用 \"),a(\"code\",[s._v(\"git reflog\")]),s._v(\" 命令，具体做法参考这里。不过，这种做法有时效性，时间长了可能找不回来。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"替换上一次提交\")])]),s._v(\" \"),a(\"p\",[s._v(\"提交以后，发现提交信息写错了，这时可以使用 \"),a(\"code\",[s._v(\"git commit\")]),s._v(\" 命令的 \"),a(\"code\",[s._v(\"--amend\")]),s._v(\" 参数，可以修改上一次的提交信息。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" commit --amend -m \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Fixes bug #42\"')]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[s._v(\"它的原理是产生一个新的提交对象，替换掉上一次提交产生的提交对象。\")]),s._v(\" \"),a(\"p\",[s._v(\"这时如果暂存区有发生变化的文件，会一起提交到仓库。所以，\"),a(\"code\",[s._v(\"--amend\")]),s._v(\" 不仅可以修改提交信息，还可以整个把上一次提交替换掉。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"修改上一次的 commit\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" commit --amend\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[s._v(\"撤销工作区的文件修改\")])]),s._v(\" \"),a(\"p\",[s._v(\"如果工作区的某个文件被改乱了，但还没有提交，可以用 \"),a(\"code\",[s._v(\"git checkout\")]),s._v(\" 命令找回本次修改之前的文件。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"git checkout -- [filename]\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[s._v(\"它的原理是先找暂存区，如果该文件有暂存的版本，则恢复该版本，否则恢复上一次提交的版本。\")]),s._v(\" \"),a(\"p\",[s._v(\"注意，工作区的文件变化一旦被撤销，就无法找回了。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"从暂存区撤销文件\")])]),s._v(\" \"),a(\"p\",[s._v(\"如果不小心把一个文件添加到暂存区，可以用下面的命令撤销。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"rm\")]),s._v(\" --cached \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"filename\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[s._v(\"上面的命令不影响已经提交的内容。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"撤销当前分支的变化\")])]),s._v(\" \"),a(\"p\",[s._v(\"你在当前分支上做了几次提交，突然发现放错了分支，这几个提交本应该放到另一个分支。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 新建一个 feature 分支，指向当前最新的提交\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 注意，这时依然停留在当前分支\")]),s._v(\"\\n$ \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch feature\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 切换到这几次提交之前的状态\")]),s._v(\"\\n$ \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reset --hard \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"当前分支此前的最后一次提交\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 切换到 feature 分支\")]),s._v(\"\\n$ \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" checkout feature\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\")])]),a(\"p\",[s._v(\"上面的操作等于是撤销当前分支的变化，将这些变化放到一个新建的分支。\")]),s._v(\" \"),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"跳转\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#跳转\"}},[s._v(\"#\")]),s._v(\" 跳转\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" log     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看 commit 历史\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" checkout xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 跳转到指定的 commit 版本中\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"子模块\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#子模块\"}},[s._v(\"#\")]),s._v(\" 子模块\")]),s._v(\" \"),a(\"p\",[s._v(\"有种情况经常会遇到：某个工作中的项目需要包含并使用另一个项目。也许是第三方库，或者你独立开发的，用于多个父项目的库。\")]),s._v(\" \"),a(\"p\",[s._v(\"现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。\")]),s._v(\" \"),a(\"p\",[s._v(\"假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。\")]),s._v(\" \"),a(\"p\",[s._v(\"Git 通过子模块来解决这个问题。子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" submodule \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),s._v(\" https://github.com/No-Github/1earn        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 添加一个名为 1earn 的库\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 1earn , 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\")])]),a(\"p\",[s._v(\"运行 git status\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[s._v(\"$ \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" status\\nOn branch master\\nYour branch is up to \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"date\")]),s._v(\" with \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'origin/master'\")]),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\".\")]),s._v(\"\\n\\nChanges to be committed:\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"use \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"git reset HEAD <file>...\"')]),s._v(\" to unstage\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\\n        new file:   .gitmodules\\n        new file:   1earn\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\")])]),a(\"p\",[s._v(\"首先应当注意到新的 .gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v('[submodule \"1earn\"]\\n\\tpath = 1earn\\n\\turl = https://github.com/No-Github/1earn\\n')])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\")])]),a(\"p\",[s._v(\"如果有多个子模块，该文件中就会有多条记录。 要重点注意的是，该文件也像 .gitignore 文件一样受到（通过）版本控制。 它会和该项目的其他部分一同被拉取推送。 这就是克隆该项目的人知道去哪获得子模块的原因。\")]),s._v(\" \"),a(\"p\",[s._v(\"当你提交时，会看到类似下面的信息：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[s._v(\"$ \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" commit -m \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"test add module\"')]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"master e214ed0\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\"test\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),s._v(\" module\\n \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" files changed, \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\" insertions\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"+\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n create mode \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"100644\")]),s._v(\" .gitmodules\\n create mode \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"160000\")]),s._v(\" 1earn\\n注意 1earn 记录的 \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"160000\")]),s._v(\" 模式。 这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件。\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\")])]),a(\"p\",[s._v(\"最后，推送这些更改：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[s._v(\"$ \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push origin master\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"大小写\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#大小写\"}},[s._v(\"#\")]),s._v(\" 大小写\")]),s._v(\" \"),a(\"p\",[s._v(\"git 默认对于文件名大小写是不敏感的,所以你修改了首字母大写,但是 git 并没有发现代码任何改动.\")]),s._v(\" \"),a(\"p\",[s._v(\"可以配置 git 使其对文件名大小写敏感\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config core.ignorecase \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"false\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h2\",{attrs:{id:\"远程操作\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#远程操作\"}},[s._v(\"#\")]),s._v(\" 远程操作\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/git/4.png\",alt:\"远程操作\"}}),s._v(\"\\n多人协作的工作模式通常是这样:\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"首先，可以试图用 \"),a(\"code\",[s._v(\"git push origin branch-name\")]),s._v(\" 推送自己的修改;\")]),s._v(\" \"),a(\"li\",[s._v(\"如果推送失败，则因为远程分支比你的本地更新，需要先用 \"),a(\"code\",[s._v(\"git pull\")]),s._v(\" 试图合并;\")]),s._v(\" \"),a(\"li\",[s._v(\"如果合并有冲突，则解决冲突，并在本地提交;\")]),s._v(\" \"),a(\"li\",[s._v(\"没有冲突或者解决掉冲突后，再用 \"),a(\"code\",[s._v(\"git push origin branch-name\")]),s._v(\" 推送就能成功!\")]),s._v(\" \"),a(\"li\",[s._v(\"如果 \"),a(\"code\",[s._v(\"git pull\")]),s._v(\" 提示 \"),a(\"code\",[s._v('\"no tracking information\"')]),s._v(\"，则说明本地分支和远程分支的链接关系没有创建，用命令 \"),a(\"code\",[s._v(\"git branch --set-upstream branch-name origin/branch-name\")])])]),s._v(\" \"),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"clone\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clone\"}},[s._v(\"#\")]),s._v(\" clone\")]),s._v(\" \"),a(\"p\",[a(\"code\",[s._v(\"git clone <版本库的网址> <本地目录名>\")])]),s._v(\" \"),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"remote\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#remote\"}},[s._v(\"#\")]),s._v(\" remote\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote          \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 命令列出所有远程主机\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote -v       \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 参看远程主机的网址\")]),s._v(\"\\norigin  git@github.com:jquery/jquery.git \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"fetch\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\norigin  git@github.com:jquery/jquery.git \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"push\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"主机名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"网址\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"          \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 用于添加远程主机\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"rm\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"主机名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"                  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 用于删除远程主机\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"rename\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"原主机名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"新主机名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 用于远程主机的改名\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"fetch\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fetch\"}},[s._v(\"#\")]),s._v(\" fetch\")]),s._v(\" \"),a(\"p\",[s._v('git fetch 会使你与另一仓库同步，提取你本地所没有的数据，为你在同步时的该远端的每一分支提供书签. 这些分支被叫做 \"远端分支\"，除了 Git 不允许你检出(切换到该分支)之外，跟本地分支没区别 —— 你可以将它们合并到当前分支，与其他分支作比较差异，查看那些分支的历史日志，等等.同步之后你就可以在本地操作这些.')]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" fetch \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"远程主机名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 将某个远程主机的更新，全部取回本地\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch 命令的 -r 选项，可以用来查看远程分支，-a 选项查看所有分支.\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch -r\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" branch -a\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\")])]),a(\"p\",[s._v(\"上面命令表示，本地主机的当前分支是 master，远程分支是 origin/master.\")]),s._v(\" \"),a(\"p\",[s._v(\"取回远程主机的更新以后，可以在它的基础上，使用 \"),a(\"code\",[s._v(\"git checkout\")]),s._v(\" 命令创建一个新的分支.\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" checkout -b newBrach origin/master\\n上面命令表示，在 origin/master 的基础上，创建一个新分支.\\n\\n此外，也可以使用 \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" merge 命令或者 \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" rebase 命令，在本地分支上合并远程分支.\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" merge origin/master\\n或者\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" rebase origin/master\\n上面命令表示在当前分支上，合并 origin/master.\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"pull\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pull\"}},[s._v(\"#\")]),s._v(\" pull\")]),s._v(\" \"),a(\"p\",[s._v(\"基本上，该命令就是在 \"),a(\"code\",[s._v(\"git fetch\")]),s._v(\" 之后紧接着 \"),a(\"code\",[s._v(\"git merge\")]),s._v(\" 远端分支到你所在的任意分支.\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" pull \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"远程主机名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"远程分支名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\":\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"本地分支名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 取回远程主机某个分支的更新，再与本地的指定分支合并.\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" pull origin next:master             \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 取回 origin 主机的 next 分支，与本地的 master 分支合并\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[s._v(\"pull 文件时和本地文件冲突\")])]),s._v(\" \"),a(\"p\",[a(\"code\",[s._v(\"git stash\")]),s._v(\" 先将本地修改存储起来\\n这样本地的所有修改就都被暂时存储起来 .是用 \"),a(\"code\",[s._v(\"git stash list\")]),s._v(\" 可以看到保存的信息:\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"stash@{0}: WIP on master: xxxxxxx <commit>\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])]),a(\"p\",[s._v(\"暂存了本地修改之后，就可以 \"),a(\"code\",[s._v(\"git pull\")]),s._v(\" 了.\")]),s._v(\" \"),a(\"p\",[s._v(\"还原暂存的内容 \"),a(\"code\",[s._v(\"git stash pop stash@{0}\")]),s._v(\"\\n提示如下信息\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"Auto-merging c/environ.c\\nCONFLICT (content): Merge conflict in c/environ.c\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"p\",[s._v(\"意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突.\")]),s._v(\" \"),a(\"p\",[s._v(\"也可以放弃本地修改，直接覆盖之\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"git reset --hard\\ngit pull\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"push\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#push\"}},[s._v(\"#\")]),s._v(\" push\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"远程主机名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"本地分支名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\":\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"远程分支名\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 将本地分支的更新，推送到远程主机\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push origin master  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 本地的 master 分支推送到 origin 主机的 master 分支.如果后者不存在，则会被新建.\")]),s._v(\"\\n\\n如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" pull 合并差异，然后再推送到远程主机.这时，如果你一定要推送，可以使用 --force 选项.\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push --force origin\\n上面命令使用 --force 选项，结果导致远程主机上更新的版本被覆盖.除非你很确定要这样做，否则应该尽量避免使用 --force 选项.\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\")])]),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"github\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#github\"}},[s._v(\"#\")]),s._v(\" github\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/git/5.png\",alt:\"github\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[s._v(\"github 开启二次验证后后，git push 验证权限失败\")])]),s._v(\" \"),a(\"p\",[s._v(\"github 开启二次验证后，提交时密码用个人设置里的 Personal Access Token，不是账号密码\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[s._v(\"Git Push 避免用户名和密码方法\")])]),s._v(\" \"),a(\"p\",[s._v(\"在 windows 中添加一个用户变量，变量名:HOME,变量值:%USERPROFILE%\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/git/6.png\",alt:\"github\"}})]),s._v(\" \"),a(\"p\",[s._v(\"进入 \"),a(\"code\",[s._v(\"%HOME%\")]),s._v(\" 目录，新建一个名为 \"),a(\"code\",[s._v(\"_netrc\")]),s._v(\" 的文件，文件中内容格式如下:\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[s._v(\"machine github.com\\nlogin your-usernmae\\npassword Personal Access Token\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\")])])]),s._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[s._v(\"压缩 github 上的项目大小\")])]),s._v(\" \"),a(\"p\",[s._v(\"下载工具 https://rtyley.github.io/bfg-repo-cleaner/\")]),s._v(\" \"),a(\"p\",[s._v(\"将下载好的 jar 文件放在要压缩的项目同级文件夹下,我这里以自己仓库为例\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 删除大于 1M 的文件\")]),s._v(\"\\njava -jar bfg.jar --strip-blobs-bigger-than 1M 1earn\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 删除所有的 mp4 文件\")]),s._v(\"\\njava -jar bfg.jar --delete-files *.mp4 1earn\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\")])]),a(\"p\",[s._v(\"BFG 将更新提交以及所有分支和标记，此时还没有物理删除。\")]),s._v(\" \"),a(\"p\",[s._v(\"进入文件夹，使用 \"),a(\"code\",[s._v(\"gc\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\"cd\")]),s._v(\" 1earn\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" reflog expire --expire\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"now --all \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&&\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" gc --prune\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"now --aggressive\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"p\",[s._v(\"确认无误后,可提交至远程仓库\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push --force origin     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 如果报错可以强行推送\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])])]),s._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[s._v(\"重建版本库\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"rm\")]),s._v(\" -rf .git\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" init\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\".\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" cm \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"first commit\"')]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),s._v(\" origin \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"your_github_repo_url\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push -f -u origin master\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\")])])]),s._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[s._v(\"Github 进行 fork 后如何与原仓库同步\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote -v               \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 查看你的远程仓库的路径\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 如果只有上面2行，说明你未设置 upstream\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),s._v(\" upstream https://github.com/xxx/xxx.git  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 把 xxx 的仓库设置为你的 upstream\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" remote -v               \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 检查是否成功\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" fetch upstream          \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 抓取上游更新\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" checkout master         \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 切换到 master 分支\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" merge upstream/master   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 合并远程的 master 分支\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\")])])])]),s._v(\" \"),a(\"hr\"),s._v(\" \"),a(\"h3\",{attrs:{id:\"git-lfs\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-lfs\"}},[s._v(\"#\")]),s._v(\" Git_LFS\")]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"Git Large File Storage (Git LFS) 是 Git 的开源扩展，使你能够像处理其他文本文件一样处理大文件。\")])]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"安装\")])]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"Windows: 访问 https://git-lfs.github.com/ 下载 exe 安装包\")])]),s._v(\" \"),a(\"p\",[s._v(\"验证安装成功\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[s._v(\"$ \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" lfs \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"install\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" Git LFS initialized.\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[s._v(\"配置\")])]),s._v(\" \"),a(\"p\",[s._v(\"安装 [Git LFS] 后 (/articles/installing-git-large-file-storage/)，需要将其与仓库中的大文件相关联。\")]),s._v(\" \"),a(\"p\",[s._v(\"如果仓库中存在要用于 GitHub 的现有文件，则需要先从仓库中删除它们，然后在本地将其添加到 Git LFS。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 将当前工作目录更改为要用于 Git LFS 的现有仓库。\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\"cd\")]),s._v(\" 1earn\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 要将仓库中的文件类型与 Git LFS 相关联，请输入 git lfs track，后跟要自动上传到 Git LFS 的文件扩展名。\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" lfs track \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"*.zip\"')]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 要与 Git LFS 关联的每个文件类型都需要添加 git lfs track。 此命令将修改仓库的 .gitattributes 文件，并将大文件与 Git LFS 相关联。\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" commit -m \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"add file.zip\"')]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" push\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 或推送所有引用的 Git LFS 文件\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" lfs push --all origin\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[s._v(\"常见报错\")])]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"strong\",[s._v(\"Error with socks5 proxy\")])]),s._v(\" \"),a(\"p\",[s._v(\"Git LFS 目前不支持 socks5 代理,换 http 代理\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" config --global http.proxy \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'http://127.0.0.1:1080'\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\")])])])]),s._v(\" \"),a(\"hr\"),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"Source & Reference\")])]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"https://github.com/521xueweihan/git-tips\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"521xueweihan/git-tips: Git的奇技淫巧\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.cnblogs.com/gx1069/p/6840413.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"git配置代理命令\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/u011394598/article/details/80256896\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"git操作及fatal: Authentication failed for错误解决\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.jianshu.com/p/d7ae993b4506\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"github开启二次验证后后，git push验证权限失败\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.cnblogs.com/ballwql/p/3462104.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Git Push 避免用户名和密码方法\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.ruanyifeng.com/blog/2014/06/git_remote.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Git远程操作详解\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.cnblogs.com/haiq/archive/2012/12/26/2833746.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Git 的 .gitignore 配置\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/daily886/article/details/80140720\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Git初始配置和基本使用\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/lts_cxl/article/details/17282725\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"让Git的输出更友好: 多种颜色和自定义log格式\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"http://www.01happy.com/git-resolve-conflicts/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"使用git pull文件时和本地文件冲突怎么办？\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/lincyang/article/details/21519333\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Git冲突：commit your changes or stash them before you can merge. \"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.jianshu.com/p/ad461b99e860\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"git commit中输入message的几种方式 \"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/sinat_29891353/article/details/76674798\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"git commit 提交多行message\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"http://www.ruanyifeng.com/blog/2019/12/git-undo.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"如何撤销 Git 操作？\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"http://einverne.github.io/post/2020/02/everything-about-dot-git-directory.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"关于 .git 目录你需要知道的一切\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/liuxiao723846/article/details/70313287\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"git checkout到历史某个版本_赶路人儿-CSDN博客_git checkout指定版本\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/qiulinsama/article/details/90703160\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"git 修改刚刚的commit\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://github.com/selfteaching/the-craft-of-selfteaching/issues/67\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Github进行fork后如何与原仓库同步：重新fork很省事，但不如反复练习版本合并 #67\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"7.11 Git 工具 - 子模块\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://github.com/git-lfs/git-lfs/issues/1424\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Error with socks5 proxy #1424\"),a(\"OutboundLink\")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}